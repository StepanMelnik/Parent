<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
          "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
          "https://checkstyle.org/dtds/configuration_1_3.dtd">

<module name="Checker">
    <property name="charset" value="UTF-8" />

    <property name="severity" value="warning" />

    <property name="fileExtensions" value="java, properties, xml" />

    <!-- https://checkstyle.org/config.html#tabWidth -->
    <property name="tabWidth" value="4" />

    <!-- https://checkstyle.org/config_filters.html#SuppressionFilter -->
    <module name="SuppressionFilter">
        <property name="file" value="checkstyle-suppressions.xml" />
        <property name="optional" value="true" />
    </module>

    <!-- Checks for whitespace                               -->
    <!-- See http://checkstyle.org/config_whitespace.html -->
    <module name="FileTabCharacter">
        <property name="eachLine" value="true" />
    </module>

    <module name="LineLength">
        <property name="fileExtensions" value="java" />
        <property name="max" value="250" />
        <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://" />
    </module>

    <!-- https://checkstyle.org/config_regexp.html#RegexpMultiline -->
    <module name="RegexpMultiline">
        <property name="format" value="^\s*\n\s*[\n}]" />
        <property name="message" value="Redundant blank line(s)" />
        <property name="fileExtensions" value="java" />
    </module>
    <module name="RegexpMultiline">
        <property name="format" value="\{\s*\n\s*\n" />
        <property name="message" value="Line is followed by redundant blank line(s)" />
        <property name="fileExtensions" value="java" />
    </module>

    <!-- https://checkstyle.org/config_regexp.html#RegexpSingleline -->
    <module name="RegexpSingleline">
        <property name="format" value="^\t" />
        <property name="message" value="Indentations must use spaces characters" />
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="^(?!\s+\* $).*?\s+$" />
        <property name="message" value="Line has trailing spaces" />
    </module>
    <module name="RegexpSingleline">
        <property name="format" value="^(?!((\s{4})*\S)|((\s{4})*\s\*)).+" />
        <property name="message" value="Indentations must be of 4 spaces each" />
    </module>

    <!-- https://checkstyle.org/checks.html -->
    <module name="TreeWalker">
        <module name="OuterTypeFilename" />
        <module name="IllegalTokenText">
            <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL" />
            <property name="format" value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)" />
            <property name="message" value="Consider using special escape sequence instead of octal value or Unicode escaped value." />
        </module>
        <module name="AvoidEscapedUnicodeCharacters">
            <property name="allowEscapesForControlCharacters" value="true" />
            <property name="allowByTailComment" value="true" />
            <property name="allowNonPrintableEscapes" value="true" />
        </module>
        <module name="AvoidStarImport">
            <property name="allowStaticMemberImports" value="true" />
        </module>
        <module name="OneTopLevelClass" />
        <module name="NoLineWrap">
            <property name="tokens" value="PACKAGE_DEF, IMPORT, STATIC_IMPORT" />
        </module>
        <module name="EmptyBlock">
        </module>
        <module name="NeedBraces">
            <property name="tokens" value="LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_IF, LITERAL_WHILE" />
        </module>
        <!-- https://checkstyle.org/config_blocks.html -->
        <module name="LeftCurly">
            <property name="option" value="nl" />
        </module>
        <!-- https://checkstyle.org/config_blocks.html -->
        <module name="RightCurly">
            <property name="option" value="alone" />
        </module>
        <module name="SuppressionXpathSingleFilter">
          <!-- suppresion is required till https://github.com/checkstyle/checkstyle/issues/7541 -->
            <property name="id" value="RightCurlyAlone" />
            <property name="query" value="//RCURLY[parent::SLIST[count(./*)=1]
                                                 or preceding-sibling::*[last()][self::LCURLY]]" />
        </module>
        <!-- https://checkstyle.org/config_whitespace.html -->
        <module name="WhitespaceAround">
            <property name="allowEmptyConstructors" value="false" />
            <property name="allowEmptyLambdas" value="true" />
            <property name="allowEmptyMethods" value="false" />
            <property name="allowEmptyTypes" value="true" />
            <property name="allowEmptyLoops" value="false" />
        </module>
        <module name="OneStatementPerLine" />
        <module name="MultipleVariableDeclarations" />
        <module name="ArrayTypeStyle" />
        <module name="MissingSwitchDefault" />
        <module name="FallThrough" />
        <module name="UpperEll" />
        <module name="ModifierOrder" />
        <module name="EmptyLineSeparator">
            <property name="tokens"
                value="PACKAGE_DEF, IMPORT, STATIC_IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF,
                    STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF, VARIABLE_DEF" />
            <property name="allowNoEmptyLineBetweenFields" value="true" />
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapDot" />
            <property name="tokens" value="DOT" />
            <property name="option" value="nl" />
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapComma" />
            <property name="tokens" value="COMMA" />
            <property name="option" value="EOL" />
        </module>
        <module name="SeparatorWrap">
            <!-- ELLIPSIS is EOL until https://github.com/google/styleguide/issues/258 -->
            <property name="id" value="SeparatorWrapEllipsis" />
            <property name="tokens" value="ELLIPSIS" />
            <property name="option" value="EOL" />
        </module>
        <module name="SeparatorWrap">
            <!-- ARRAY_DECLARATOR is EOL until https://github.com/google/styleguide/issues/259 -->
            <property name="id" value="SeparatorWrapArrayDeclarator" />
            <property name="tokens" value="ARRAY_DECLARATOR" />
            <property name="option" value="EOL" />
        </module>
        <module name="SeparatorWrap">
            <property name="id" value="SeparatorWrapMethodRef" />
            <property name="tokens" value="METHOD_REF" />
            <property name="option" value="nl" />
        </module>
        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$" />
            <message key="name.invalidPattern" value="Package name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="TypeName">
            <property name="format" value="^[A-Z][a-zA-Z0-9]*(_[A-Z][a-zA-Z0-9]*)*$" />
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF" />
            <message key="name.invalidPattern" value="Type name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="MemberName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$" />
            <message key="name.invalidPattern" value="Member name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="ParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$" />
            <message key="name.invalidPattern" value="Parameter name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="LambdaParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$" />
            <message key="name.invalidPattern" value="Lambda parameter name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="CatchParameterName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$" />
            <message key="name.invalidPattern" value="Catch parameter name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="LocalVariableName">
            <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$" />
            <message key="name.invalidPattern" value="Local variable name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="ClassTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern" value="Class type name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="MethodTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern" value="Method type name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="InterfaceTypeParameterName">
            <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)" />
            <message key="name.invalidPattern" value="Interface type name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="NoFinalizer" />
        <module name="GenericWhitespace">
            <message key="ws.followed" value="GenericWhitespace ''{0}'' is followed by whitespace." />
            <message key="ws.preceded" value="GenericWhitespace ''{0}'' is preceded with whitespace." />
            <message key="ws.illegalFollow" value="GenericWhitespace ''{0}'' should followed by whitespace." />
            <message key="ws.notPreceded" value="GenericWhitespace ''{0}'' is not preceded with whitespace." />
        </module>
        <!-- https://checkstyle.org/config_misc.html#Indentation -->
        <!--module name="Indentation">
            <property name="basicOffset" value="2"/>
            <property name="braceAdjustment" value="0"/>
            <property name="caseIndent" value="2"/>
            <property name="throwsIndent" value="4"/>
            <property name="lineWrappingIndentation" value="4"/>
            <property name="arrayInitIndent" value="2"/>
        </module-->
        <!--module name="AbbreviationAsWordInName">
            <property name="ignoreFinal" value="false" />
            <property name="allowedAbbreviationLength" value="4" />
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, ANNOTATION_DEF, ANNOTATION_FIELD_DEF,
                    PARAMETER_DEF, VARIABLE_DEF, METHOD_DEF" />
        </module-->
        <module name="OverloadMethodsDeclarationOrder" />
        <module name="VariableDeclarationUsageDistance" />
        <!--  Resolved by eclipse preferences -->
        <!--module name="CustomImportOrder">
            <property name="sortImportsInGroupAlphabetically" value="true" />
            <property name="separateLineBetweenGroups" value="true" />
            <property name="customImportOrderRules" value="STATIC###THIRD_PARTY_PACKAGE" />
            <property name="tokens" value="IMPORT, STATIC_IMPORT, PACKAGE_DEF" />
        </module-->
        <module name="MethodParamPad">
            <property name="tokens" value="CTOR_DEF, LITERAL_NEW, METHOD_CALL, METHOD_DEF,
                    SUPER_CTOR_CALL, ENUM_CONSTANT_DEF" />
        </module>
        <module name="NoWhitespaceBefore">
            <property name="tokens" value="COMMA, SEMI, POST_INC, POST_DEC, DOT, ELLIPSIS, METHOD_REF" />
            <property name="allowLineBreaks" value="true" />
        </module>
        <module name="ParenPad">
            <property name="tokens"
                value="ANNOTATION, ANNOTATION_FIELD_DEF, CTOR_CALL, CTOR_DEF, DOT, ENUM_CONSTANT_DEF,
                    EXPR, LITERAL_CATCH, LITERAL_DO, LITERAL_FOR, LITERAL_IF, LITERAL_NEW,
                    LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_WHILE, METHOD_CALL,
                    METHOD_DEF, QUESTION, RESOURCE_SPECIFICATION, SUPER_CTOR_CALL, LAMBDA" />
        </module>
        <module name="OperatorWrap">
            <property name="option" value="NL" />
            <property name="tokens"
                value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR,
                    LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF " />
        </module>
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationMostCases" />
            <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF" />
        </module>
        <module name="AnnotationLocation">
            <property name="id" value="AnnotationLocationVariables" />
            <property name="tokens" value="VARIABLE_DEF" />
            <property name="allowSamelineMultipleAnnotations" value="true" />
        </module>
        <module name="NonEmptyAtclauseDescription" />
        <module name="InvalidJavadocPosition" />
        <module name="JavadocTagContinuationIndentation" />
        
        <!-- Ignore header java docs in test package  -->
        <!--module name="SummaryJavadoc">
            <property name="forbiddenSummaryFragments" value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )" />
        </module-->
        
        <module name="JavadocParagraph" />
        <module name="AtclauseOrder">
            <property name="tagOrder" value="@param, @return, @throws, @deprecated" />
            <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF" />
        </module>
        <module name="JavadocMethod">
            <property name="scope" value="public" />
            <property name="allowMissingParamTags" value="true" />
            <property name="allowMissingReturnTag" value="true" />
            <property name="allowedAnnotations" value="Override, Test" />
            <property name="tokens" value="METHOD_DEF, CTOR_DEF, ANNOTATION_FIELD_DEF" />
        </module>
        <!--module name="MissingJavadocMethod">
            <property name="scope" value="public" />
            <property name="minLineCount" value="2" />
            <property name="allowedAnnotations" value="Override, Test" />
            <property name="tokens" value="METHOD_DEF, ANNOTATION_FIELD_DEF" />
        </module-->
        <module name="MethodName">
            <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9_]*$" />
            <message key="name.invalidPattern" value="Method name ''{0}'' must match pattern ''{1}''." />
        </module>
        <module name="SingleLineJavadoc">
            <property name="ignoreInlineTags" value="false" />
        </module>
        <module name="EmptyCatchBlock">
            <property name="exceptionVariableName" value="expected" />
        </module>
        <module name="CommentsIndentation">
            <property name="tokens" value="SINGLE_LINE_COMMENT, BLOCK_COMMENT_BEGIN" />
        </module>
        <!-- https://checkstyle.org/config_filters.html#SuppressionXpathFilter -->
        <module name="SuppressionXpathFilter">
            <property name="file" value="${org.checkstyle.google.suppressionxpathfilter.config}" default="checkstyle-xpath-suppressions.xml" />
            <property name="optional" value="true" />
        </module>
        <!-- https://checkstyle.org/config_naming.html#AbstractClassName -->
        <module name="AbstractClassName">
            <property name="format" value="^A[a-zA-Z0-9]*$" />
            <property name="ignoreModifier" value="true" />
        </module>
        <!-- https://checkstyle.org/config_naming.html#ConstantName -->
        <module name="ConstantName">
            <property name="format" value="instance|log|(^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$)" />
        </module>
        <!-- https://checkstyle.org/config_imports.html#IllegalImport -->
        <module name="IllegalImport">
            <property name="illegalPkgs" value="sun, com.sun, com.oracle" />
        </module>
        <!-- https://checkstyle.org/config_coding.html#EqualsHashCode -->
        <module name="EqualsHashCode" />
        <!-- https://checkstyle.org/config_coding.html#IllegalInstantiation -->
        <module name="IllegalInstantiation">
            <property name="classes" value="java.lang.Boolean" />
        </module>
        <!-- https://checkstyle.org/config_coding.html#InnerAssignment -->
        <module name="InnerAssignment" />
        
        <!-- https://checkstyle.org/config_coding.html#MagicNumber -->
        <!-- Test package may use any numbers i unit tests -->
        <!--module name="MagicNumber">
            <property name="ignoreNumbers" value="-1, 0, 1, 2, 3, 100" />
        </module-->
        
        <!-- https://checkstyle.org/config_coding.html#SimplifyBooleanReturn -->
        <module name="SimplifyBooleanReturn" />
        <!-- https://checkstyle.org/config_coding.html#StringLiteralEquality -->
        <module name="StringLiteralEquality" />
        <!-- https://checkstyle.org/config_coding.html#NestedIfDepth -->
        <module name="NestedIfDepth">
            <property name="max" value="3" />
        </module>
        <!-- https://checkstyle.org/config_coding.html#NestedTryDepth -->
        <module name="NestedTryDepth" />
        <!-- https://checkstyle.org/config_coding.html#SuperClone -->
        <module name="SuperClone" />
        <!-- https://checkstyle.org/config_coding.html#SuperFinalize -->
        <module name="SuperFinalize" />
        <!-- https://checkstyle.org/config_coding.html#PackageDeclaration -->
        <module name="PackageDeclaration" />
        <!-- https://checkstyle.org/config_coding.html#ParameterAssignment -->
        <module name="ParameterAssignment" />
        <!-- https://checkstyle.org/config_coding.html#ExplicitInitialization -->
        <module name="ExplicitInitialization" />
        <!-- https://checkstyle.org/config_coding.html#DefaultComesLast -->
        <module name="DefaultComesLast" />
        <!-- https://checkstyle.org/config_coding.html#UnnecessaryParentheses -->
        <module name="UnnecessaryParentheses" />
        <!-- https://checkstyle.org/config_design.html#VisibilityModifier -->
        <module name="VisibilityModifier">
            <property name="packageAllowed" value="true" />
            <property name="protectedAllowed" value="true" />
        </module>
        <!-- https://checkstyle.org/config_design.html#ThrowsCount -->
        <module name="ThrowsCount">
            <property name="max" value="3" />
        </module>
        <!-- https://checkstyle.org/config_misc.html#TodoComment -->
        <module name="TodoComment">
            <property name="format" value="TODO" />
            <property name="severity" value="info" />
        </module>
        <module name="TodoComment">
            <property name="format" value="FIXME" />
            <property name="severity" value="info" />
        </module>
        <!-- https://checkstyle.org/config_filters.html#SuppressionCommentFilter -->
        <module name="SuppressionCommentFilter">
            <property name="offCommentFormat" value="CSOFF" />
            <property name="onCommentFormat" value="CSON" />
        </module>

    </module>
</module>
